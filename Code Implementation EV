import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
df1=pd.read_csv("C:\\Users\\lovish pc\\Downloads\\archive (17)\\Cheapestelectriccars-EVDatabase.csv")

print(df1.columns.tolist())

df1=df1.fillna('0')

df1['Manufacturer'] = df1.Name.str.split(' ', 1, expand=True)[0]

PriceinUK=[]
for item in df1['PriceinUK']:
    PriceinUK+=[int(item.replace('£','').replace(',',''))]
df1['PriceinUK']=PriceinUK

PriceinGermany=[]
for item in df1['PriceinGermany']:
    PriceinGermany+=[int(item.replace('€','').replace(',',''))]
df1['PriceinGermany']=PriceinGermany

FastChargeSpeed=[]
for item in df1['FastChargeSpeed']:
    FastChargeSpeed+=[int(item.replace(' km/h','').replace('-','0'))]
df1['FastChargeSpeed']=FastChargeSpeed

Efficiency=[]
for item in df1['Efficiency']:
    Efficiency+=[int(item.replace(' Wh/km',''))]
df1['Efficiency']=Efficiency

Range=[]
for item in df1['Range']:
    Range+=[int(item.replace(' km',''))]
df1['Range']=Range

TopSpeed=[]
for item in df1['TopSpeed']:
    TopSpeed+=[int(item.replace(' km/h',''))]
df1['TopSpeed']=TopSpeed

Acceleration=[]
for item in df1['Acceleration']:
    Acceleration+=[float(item.replace(' sec',''))]
df1['Acceleration']=Acceleration

Subtitle=[]
for item in df1['Subtitle']:
    Subtitle+=[float(item.replace('Battery Electric Vehicle | ','').replace(' kWh','').replace('      ',''))]
df1['Subtitle']=Subtitle

df1= df1.rename(columns = {'Subtitle':'KWH'})

df1.info()

df1.corr()


plt.figure(figsize=(8,6))
sns.heatmap(df1.corr(), annot=True)

sns.countplot(x = 'Drive', data = df1)

sns.countplot(x = 'NumberofSeats', data = df1)

plt.figure(figsize=(8,6))
sns.countplot(x = 'NumberofSeats', hue='Drive', data=df1)

plt.figure(figsize=(18,10))
sns.countplot(y = 'Manufacturer', data = df1)

sns.relplot(x="KWH", y="Acceleration", height=6,hue="Drive",data=df1)

sns.relplot(x="KWH", y="Acceleration", size="NumberofSeats", height=6,sizes=(15, 100),data=df1)

sns.relplot(x="TopSpeed", y="Range",height=6, hue="Drive",data=df1)

sns.jointplot(x=df1["KWH"], y=df1["Range"], kind="hex", color="#4CB391")

sns.jointplot(x=df1["KWH"], y=df1["Efficiency"], kind="hex", color="#4CB391")

sns.relplot(x="FastChargeSpeed", y="Efficiency", height=6,data=df1)

c=0
for i in range(0, len(df1["PriceinUK"])):
    if (df1["PriceinUK"][i]==0):
        c+=1
print('Empty Values:',c)

 pd.options.mode.chained_assignment = None

for i in range(0, len(df1["PriceinUK"])):
    if (df1["PriceinUK"][i]==0):
        val=df1["PriceinGermany"][i]*0.85
        df1["PriceinUK"][i]=val

print(df1)

X=df1.iloc[:,[3,9]].values
print(X)

from sklearn.cluster import KMeans 
wcss=[] 
for i in range(1,11):s
    kmeans=KMeans(n_clusters=i,init="k-means++",random_state=42)
   
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1,11),wcss)
plt.title("The elbow method")
plt.xlabel("no of clusters")
plt.ylabel("wcss")
plt.show()

kmeans=KMeans(n_clusters=3,init="k-means++",random_state=42)
y_kmeans=kmeans.fit_predict(X)
print(y_kmeans)

plt.scatter(X[y_kmeans==0,0],X[y_kmeans==0,1],s=100,c="red",label="cluster1")

plt.scatter(X[y_kmeans==1,0],X[y_kmeans==1,1],s=100,c="blue",label="cluster2")
plt.scatter(X[y_kmeans==2,0],X[y_kmeans==2,1],s=100,c="green",label="cluster3")
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c="yellow",label="centeriods")

plt.title("clustering Algorithm")
plt.xlabel("TOP Speed")
plt.ylabel("Price in Germany$")
plt.legend()
plt.show()

X=df1.iloc[:,[3,10]].values
print(X)

from sklearn.cluster import KMeans 
wcss=[] 
for i in range(1,11):
    kmeans=KMeans(n_clusters=i,init="k-means++",random_state=42)
    
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)lovish"
plt.plot(range(1,11),wcss)
plt.title("The elbow method")
plt.xlabel("no of clusters")
plt.ylabel("wcss")
plt.show()

kmeans=KMeans(n_clusters=3,init="k-means++",random_state=42)
y_kmeans=kmeans.fit_predict(X)
print(y_kmeans)

plt.scatter(X[y_kmeans==0,0],X[y_kmeans==0,1],s=100,c="red",label="cluster1")

plt.scatter(X[y_kmeans==1,0],X[y_kmeans==1,1],s=100,c="blue",label="cluster2")
plt.scatter(X[y_kmeans==2,0],X[y_kmeans==2,1],s=100,c="green",label="cluster3")
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c="yellow",label="centeriods")

plt.title("clustering Algorithm")
plt.xlabel("Top speed")
plt.ylabel("Price in Uk$")
plt.legend()
plt.show()
